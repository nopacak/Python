# Requires pymongo 3.6.0+
import pandas as pd
from bson.objectid import ObjectId
from bson.regex import Regex
from bson.son import SON
from pymongo import MongoClient
import datetime
from dataclasses import dataclass

date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
client = MongoClient("mongodb://ip:port/")
database = client["dbName"]
collection = database["Collection"]
collection_1 = database["Collection1"]

# Created with Studio 3T, the IDE for MongoDB - https://studio3t.com/

def get_offer_ids():
    """Returns the offer IDs from MongoDB"""
    pipeline = [
        {
            u"$match": {
                u"brandCode": u"something",
                u"errorMessage": Regex(u"ru\\x{010d}ni izra\\x{010d}un"),
                u"createdAt": {
                    u"$gt": u"date"
                }
            }
        }, 
        {
            u"$group": {
                u"_id": u"$offerId",
                u"errorMessage": {
                    u"$first": u"$errorMessage"
                },
                u"createdAt": {
                    u"$first": u"$createdAt"
                }
            }
        }, 
        {
            u"$sort": SON([ (u"createdAt", -1) ])
        }
    ]

    cursor = collection_1.aggregate(
        pipeline, 
        allowDiskUse = False
    )
    offer_ids = []
    try:
        for doc in cursor:
            offer_id = doc.get("_id")
            if offer_id:
                offer_ids.append(offer_id)
    finally:
        return offer_ids





def get_offer_data(offer_id):
    """Returns the offer data from MongoDB"""

    query = {}
    query["_id"] = ObjectId(offer_id)

    projection = {
        "sharedData.owner.oib": 1.0,
        "sharedData.owner.firstName": 1.0,
        "sharedData.owner.lastName": 1.0,
        "sharedData.contractor.oib": 1.0,
        "sharedData.contractor.firstName": 1.0,
        "sharedData.contractor.lastName": 1.0,
        "sharedData.calculationData.vehicle.chassisNumber": 1.0,
        "sharedData.calculationData.registration.prefix": 1.0,
        "sharedData.calculationData.registration.number": 1.0,
        "sharedData.owner.address": 1.0,
        "sharedData.contractor.address": 1.0,
        "sharedData.calculationData.isLeasing": 1.0,
        "sharedData.calculationData.onlyKasko": 1.0,
        "sharedData.initialBonus": 1.0
    }



    cursor = collection.find(query, projection = projection)

    # Define the OfferData dataclass
    @dataclass
    class OfferData:
        oib: str
        contractor_oib: str
        firstName: str
        contractor_firstName: str
        lastName: str
        contractor_lastName: str
        chassis: str
        reg_prefix: str
        reg_no: str
        reg: str
        street: str
        zip_code: str
        city: str
        full_address: str
        contractor_street: str
        contractor_zip_code: str
        contractor_city: str
        contractor_full_address: str
        leasing: bool
        only_kasko: bool
        bonus: int

 
    try:
        for doc in cursor:
            # Extracting each field and assigning to a variable
                
            oib = doc.get("sharedData", {}).get("owner", {}).get("oib")
            contractor_oib = doc.get("sharedData", {}).get("contractor", {}).get("oib")
            firstName = doc.get("sharedData", {}).get("owner", {}).get("firstName")
            contractor_firstName = doc.get("sharedData", {}).get("contractor", {}).get("firstName")
            lastName = doc.get("sharedData", {}).get("owner", {}).get("lastName")
            contractor_lastName = doc.get("sharedData", {}).get("contractor", {}).get("lastName")
            chassis = doc.get("sharedData", {}).get("calculationData", {}).get("vehicle", {}).get("chassisNumber")
            reg_prefix = doc.get("sharedData", {}).get("calculationData", {}).get("registration", {}).get("prefix")
            reg_no = doc.get("sharedData", {}).get("calculationData", {}).get("registration", {}).get("number")
            reg = reg_prefix + reg_no

            #get all adress fields (result is dictionary)
            address_dict = doc.get("sharedData", {}).get("owner", {}).get("address")
            # Extract individual fields from the address
            street = address_dict.get('streetAndHouseNumber', '')
            zip_code = address_dict.get('zipCode', '')
            city = address_dict.get('city', '')
            # Concatenate the address components
            full_address = ', '.join(filter(None, [street, city, zip_code]))

            #get all contractor adress fields (result is dictionary)
            contractor_address_dict = doc.get("sharedData", {}).get("contractor", {}).get("address")
            # Extract individual fields from the address
            contractor_street = contractor_address_dict.get('streetAndHouseNumber', '')
            contractor_zip_code = contractor_address_dict.get('zipCode', '')
            contractor_city = contractor_address_dict.get('city', '')
            # Concatenate the address components
            contractor_full_address = ', '.join(filter(None, [contractor_street, contractor_city, contractor_zip_code]))

            leasing = doc.get("sharedData", {}).get("calculationData", {}).get("isLeasing")
            only_kasko = doc.get("sharedData", {}).get("calculationData", {}).get("onlyKasko")
            bonus = doc.get("sharedData", {}).get("initialBonus")

            offer_data = OfferData(
                oib=oib,
                contractor_oib=contractor_oib,
                firstName=firstName,
                contractor_firstName=contractor_firstName,
                lastName=lastName,
                contractor_lastName=contractor_lastName,
                chassis=chassis,
                reg_prefix=reg_prefix,
                reg_no=reg_no,
                reg=reg,
                street=street,
                zip_code=zip_code,
                city=city,
                full_address=full_address,
                contractor_street=contractor_street,
                contractor_zip_code=contractor_zip_code,
                contractor_city=contractor_city,
                contractor_full_address=contractor_full_address,
                leasing=leasing,
                only_kasko=only_kasko,
                bonus=bonus
            )

            return offer_data
    except Exception as e:
        print(f"An error occurred: {str(e)}") 

    finally:
        client.close()



def get_price_data():
    pipeline = [
        {
            u"$match": {
                u"$and": [
                    {
                        u"brand_id": ObjectId("ObjectId")
                    },
                    {
                        u"sharedData.calculationData.policy.croatiaBasePrice": {
                            u"$gt": 1.0
                        }
                    },
                    {
                        u"status": {
                            u"$ne": u"active"
                        }
                    },
                    {
                        u"status": {
                            u"$ne": u"paid"
                        }
                    }
                ]
            }
        }, 
        {
            u"$sort": SON([ (u"_id", -1) ])
        }, 
        {
            u"$project": {
                u"basePrice": u"$sharedData.calculationData.policy.croatiaBasePrice",
                u"adviserDiscount": u"$sharedData.calculationData.additionalPriceModifiers.adviserDiscount.amount",
                u"comercialDiscount": u"$sharedData.calculationData.additionalPriceModifiers.croatiaCommercialPerson.amount"
            }
        },
        {
            "$limit": 100
        }
    ]

    cursor = collection.aggregate(pipeline, allowDiskUse=False)

    # Collect data in a structured format
    data = []
    ids = []
    try:
        for doc in cursor:
            # Extract the relevant information
            offer_id = str(doc.get('_id'))  # Converting ObjectId to string
            base_price = doc.get('basePrice')
            adviser_discount = doc.get('adviserDiscount')
            comercial_discount = doc.get('comercialDiscount')

            # Append id to the ids list
            ids.append(offer_id)

            # Append this record as a dictionary to the data list
            data.append({
                "ID": offer_id,
                "Base Price": base_price,
                "Adviser Discount": adviser_discount,
                "Commercial Discount": comercial_discount
            })
    finally:
        pass


    # Create a DataFrame
    df = pd.DataFrame(data)

    # Export DataFrame to CSV
    csv_file = f"path/to/output_{date}.csv"
    df.to_csv(csv_file, index=False)

    print(f"Data exported to {csv_file}")

    return ids, csv_file


